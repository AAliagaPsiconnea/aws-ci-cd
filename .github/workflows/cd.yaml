name: CD Pipeline
on:
  workflow_run:
    workflows: ["CI Pipeline"]
    types: [completed]

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - id: whoami
        run: |
          ACCOUNT=$(aws sts get-caller-identity --query Account --output text)
          echo "account=$ACCOUNT" >> "$GITHUB_OUTPUT"

      - id: registry
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          ACCOUNT: ${{ steps.whoami.outputs.account }}
        run: |
          REGISTRY="${ACCOUNT}.dkr.ecr.${AWS_REGION}.amazonaws.com"
          echo "value=$REGISTRY" >> "$GITHUB_OUTPUT"

      - name: Prepare new task definition with env vars
        id: taskdef
        run: |
          IMAGE="${{ steps.registry.outputs.value }}/${{ secrets.ECR_REPOSITORY_NAME }}:latest"
          BASE_TASK_DEF=${{ secrets.ECS_TASK_DEFINITION }}   # path to base task-def.json in repo

          # Export all SSM params under a given path
          PARAMS=$(aws ssm get-parameters-by-path \
            --path "/${{ secrets.PARAMETER_STORE_PATH }}" \
            --with-decryption \
            --query "Parameters[].{Name:Name,Value:Value}" \
            --output json)

          echo "Fetched $(echo $PARAMS | jq length) parameters from SSM"

          # Convert SSM params into ECS environment array
          ENV_VARS=$(echo "$PARAMS" | jq '[.[] | {name: (.Name | split("/")[-1]), value: .Value}]')

          # Create new task definition with updated image + env vars
          jq --arg IMAGE "$IMAGE" --argjson ENV "$ENV_VARS" \
            '.containerDefinitions[0].image=$IMAGE | .containerDefinitions[0].environment=$ENV' \
            $BASE_TASK_DEF > new-task-def.json

          echo "file=new-task-def.json" >> $GITHUB_OUTPUT

      - name: Register new task definition
        run: |
          aws ecs register-task-definition --cli-input-json file://new-task-def.json

      - name: Deploy to ECS service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: new-task-def.json
          service: ${{ secrets.ECS_SERVICE_NAME }}
          cluster: ${{ secrets.ECS_CLUSTER_NAME }}
          wait-for-service-stability: true
