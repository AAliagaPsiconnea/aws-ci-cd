name: CD Pipeline
on:
  workflow_run:
    workflows: ["CI Pipeline"]
    types: [completed]

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - id: whoami
        run: |
          ACCOUNT=$(aws sts get-caller-identity --query Account --output text)
          echo "account=$ACCOUNT" >> "$GITHUB_OUTPUT"

      - id: registry
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          ACCOUNT: ${{ steps.whoami.outputs.account }}
        run: |
          REGISTRY="${ACCOUNT}.dkr.ecr.${AWS_REGION}.amazonaws.com"
          echo "value=$REGISTRY" >> "$GITHUB_OUTPUT"

      - name: Get latest task definition JSON
        run: |
          aws ecs describe-task-definition \
            --task-definition ${{ secrets.ECS_TASK_DEFINITION }} \
            --query taskDefinition \
            --output json > task-def.json

      - name: Fetch env vars from SSM Parameter Store
        run: |
          # Adjust PARAMETER_STORE_PATH secret to match your hierarchy, e.g. /myapp/prod
          PARAMS=$(aws ssm get-parameters-by-path \
            --path "/${{ secrets.PARAMETER_STORE_PATH }}" \
            --with-decryption \
            --recursive \
            --query "Parameters[].{Name:Name,Value:Value}" \
            --output json)

          echo "Fetched $(echo $PARAMS | jq length) parameters from SSM"

          # Convert into ECS env format: [{name: "FOO", value: "bar"}, ...]
          echo "$PARAMS" | jq '[.[] | {name: (.Name | split("/")[-1]), value: .Value}]' > env.json

      - name: Inject new image and env vars
        run: |
          IMAGE="${{ steps.registry.outputs.value }}/${{ secrets.ECR_REPOSITORY_NAME }}:latest"
          echo "Using image: $IMAGE"

          jq --arg IMAGE "$IMAGE" --slurpfile ENV env.json \
             '.containerDefinitions[0].image=$IMAGE
              | .containerDefinitions[0].environment=$ENV[0]' \
             task-def.json > new-task-def.json

      - name: Register new task definition revision
        run: |
          NEW_REVISION=$(aws ecs register-task-definition \
            --cli-input-json file://new-task-def.json \
            --query taskDefinition.taskDefinitionArn \
            --output text)
          echo "new_revision=$NEW_REVISION" >> $GITHUB_ENV
          echo "Registered $NEW_REVISION"

      - name: Deploy new revision to ECS service
        run: |
          aws ecs update-service \
            --cluster ${{ secrets.ECS_CLUSTER_NAME }} \
            --service ${{ secrets.ECS_SERVICE_NAME }} \
            --task-definition "$new_revision" \
            --force-new-deployment \
            --region ${{ secrets.AWS_REGION }}
